using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using ESRI.ArcGIS;
using ESRI.ArcGIS.esriSystem;
using ProSuite.Commons.Essentials.CodeAnnotations;
using ProSuite.Commons.Logging;

//FILE AUTOMATICALLY GENERATED BY ESRI LICENSE INITIALIZATION ADDIN
//YOU SHOULD NOT NORMALLY EDIT OR REMOVE THIS FILE FROM THE PROJECT

namespace ProSuite.Commons.AO.Licensing
{
	internal sealed class LicenseInitializer
	{
		private static readonly IMsg _msg =
			new Msg(MethodBase.GetCurrentMethod().DeclaringType);

		private IAoInitialize _aoInitialize;

		//Requested products and extensions
		private esriLicenseProductCode[] _productsCodes;
		private esriLicenseExtensionCode[] _extensionsCodes;

		//Product and extensions that have been successfully checked out
		private esriLicenseProductCode _initProduct;
		private List<esriLicenseExtensionCode> _initializedExtensions;

		public bool InitializeApplication(
			[NotNull] esriLicenseProductCode[] productCodes,
			[NotNull] esriLicenseExtensionCode[] extensionLicenseCodes)
		{
			try
			{
				TryBindProduct(productCodes);
			}
			catch (Exception ex)
			{
				_msg.Debug("Exception while binding ArcGIS 10 product.", ex);
			}

			if (_aoInitialize == null)
			{
				try
				{
					// If the next line fails with error code -2147221164: make sure that exe's are compiled for x86
					// Otherwise on 64bit systems this error occurs.
					_aoInitialize = new AoInitializeClass();
				}
				catch (Exception e)
				{
					_msg.Debug("Error initializing ArcObjects", e);

					_msg.Warn("Unable to initialize ArcGIS. This application cannot run! " +
					          "Please check that ArcGIS (Desktop, Engine or Server) is installed.");
					return false;
				}
			}

			//Initialize the application
			_productsCodes = productCodes;
			_extensionsCodes = extensionLicenseCodes;

			esriLicenseStatus licenseStatus = CheckOutLicenses();
			if (licenseStatus != esriLicenseStatus.esriLicenseCheckedOut)
			{
				_msg.WarnFormat("ESRI License Initializer: {0}", LicenseMessage(licenseStatus));
				return false;
			}

			return true;
		}

		public esriLicenseProductCode InitializedProduct => _initProduct;

		public esriLicenseStatus CheckoutExtension(esriLicenseExtensionCode extensionCode)
		{
			esriLicenseStatus status = _aoInitialize.CheckOutExtension(extensionCode);

			if (status == esriLicenseStatus.esriLicenseCheckedOut)
			{
				if (_initializedExtensions == null)
				{
					_initializedExtensions = new List<esriLicenseExtensionCode> {extensionCode};
				}
				else if (! _initializedExtensions.Contains(extensionCode))
				{
					_initializedExtensions.Add(extensionCode);
				}
			}

			return status;
		}

		public esriLicenseStatus CheckinExtension(esriLicenseExtensionCode extensionCode)
		{
			esriLicenseStatus status = _aoInitialize.CheckInExtension(extensionCode);

			if (status == esriLicenseStatus.esriLicenseCheckedIn)
			{
				if (_initializedExtensions != null)
				{
					_initializedExtensions.Remove(extensionCode);
				}
			}

			return status;
		}

		private static void TryBindProduct(
			[NotNull] IList<esriLicenseProductCode> licenseProductCodes)
		{
			try
			{
				ProductCode productCode = GetProductCode(licenseProductCodes[0]);

				TryBindProduct(productCode);

				// TODO: fall back productCode
			}
			catch (Exception e)
			{
				_msg.Debug(
					"Binding to product failed, most likely because ArcGIS 10 is not installed", e);
			}
		}

		private static ProductCode GetProductCode(esriLicenseProductCode licenseProductCode)
		{
			switch (licenseProductCode)
			{
				case esriLicenseProductCode.esriLicenseProductCodeEngineGeoDB:
				case esriLicenseProductCode.esriLicenseProductCodeEngine:
					return ProductCode.Engine;

				case esriLicenseProductCode.esriLicenseProductCodeArcServer:
					return ProductCode.Server;

				default:
					return ProductCode.Desktop;
			}
		}

		[MethodImpl(MethodImplOptions.NoInlining)]
		[DebuggerStepThrough]
		private static void TryBindProduct(ProductCode productCode)
		{
			try
			{
				// NOTE: InstalledRuntimes can be accessed before binding.
				foreach (RuntimeInfo runtimeInfo in RuntimeManager.InstalledRuntimes)
				{
					_msg.DebugFormat("Installed product: {0} {1} in {2}",
					                 runtimeInfo.Product,
					                 runtimeInfo.Version,
					                 runtimeInfo.Path);
				}

				if (! RuntimeManager.Bind(productCode))
				{
					throw new InvalidOperationException("Unable to bind ArcGIS Product.");
				}

				_msg.DebugFormat("Bound product '{0}'", productCode);
			}
			catch (Exception e)
			{
				_msg.Debug("Binding to ArcGIS 10 product failed.", e);
			}
		}

		public void ShutdownApplication()
		{
			if (_aoInitialize == null)
			{
				return;
			}

			//Checkin the extensions
			if (_initializedExtensions != null)
			{
				foreach (esriLicenseExtensionCode extensionCode in _initializedExtensions)
				{
					if (_aoInitialize.CheckInExtension(extensionCode) !=
					    esriLicenseStatus.esriLicenseCheckedIn)
					{
						//Silent check in error
						//System.Diagnostic.Trace.WriteLine(LicenseMessage(licenseStatus), "ESRI License Initializer")
					}
				}
			}

			//Shut down the AoInitialize object
			_aoInitialize.Shutdown();
			//_aoInitialize = null;
		}

		#region "Private helper functions"

		private esriLicenseStatus CheckOutLicenses()
		{
			var licenseStatus = esriLicenseStatus.esriLicenseNotInitialized;

			//Determine if the product is available
			foreach (esriLicenseProductCode productCode in _productsCodes)
			{
				licenseStatus = _aoInitialize.IsProductCodeAvailable(productCode);

				if (licenseStatus != esriLicenseStatus.esriLicenseAvailable)
				{
					continue;
				}

				// NOTE: in case the license expires in less than 15 days and the registry key 
				//       HKEY_LOCAL_MACHINE\Software\ESRI\License does not have a string value
				//       with the name TIMEOUTWARNING and the value FALSE
				//       a message box will pop up here. This is a problem if running as scheduled
				//       task - make sure this value exists and is set to false on all servers!
				_msg.DebugFormat("Initializing license: {0}", productCode);
				licenseStatus = _aoInitialize.Initialize(productCode);

				if (licenseStatus == esriLicenseStatus.esriLicenseCheckedOut)
				{
					_initProduct = productCode;
					break;
				}
			}

			if (_extensionsCodes != null)
			{
				//Checkout the extensions - only when product is initialized
				if (licenseStatus == esriLicenseStatus.esriLicenseCheckedOut)
				{
					var checkedOutExtensions =
						new List<esriLicenseExtensionCode>(_extensionsCodes.Length);

					foreach (esriLicenseExtensionCode extLicense in _extensionsCodes)
					{
						//Determine if the extensions are available - some may not be available depending on the product initialized
						//If so, initialization fails... 
						licenseStatus =
							_aoInitialize.IsExtensionCodeAvailable(_initProduct, extLicense);
						if (licenseStatus == esriLicenseStatus.esriLicenseAvailable)
						{
							_msg.DebugFormat("Checking out extension: {0}", extLicense);

							licenseStatus = _aoInitialize.CheckOutExtension(extLicense);

							if (licenseStatus != esriLicenseStatus.esriLicenseCheckedOut &&
							    licenseStatus != esriLicenseStatus.esriLicenseAlreadyInitialized)
							{
								break;
							}

							//Add to license initialized list
							checkedOutExtensions.Add(extLicense);
						}
						else
						{
							break; //Exit when failed to check out any extension
						}
					}

					if (checkedOutExtensions.Count > 0)
					{
						_initializedExtensions = checkedOutExtensions.ToList();
					}
				}
			}

			return licenseStatus;
		}

		[NotNull]
		private static string LicenseMessage(esriLicenseStatus licenseStatus)
		{
			switch (licenseStatus)
			{
				case esriLicenseStatus.esriLicenseNotLicensed:
					return "You are not licensed to run this product!";

				case esriLicenseStatus.esriLicenseUnavailable:
					return "There are insuffient licenses to run!";

				case esriLicenseStatus.esriLicenseFailure:
					return "Unexpected license failure! Please contact your administrator.";

				case esriLicenseStatus.esriLicenseAlreadyInitialized:
					return
						"The license has already been initialized! Please check your implementation.";
			}

			// TODO really?
			return string.Empty;
		}

		#endregion
	}
}
