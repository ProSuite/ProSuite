//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProSuite.QA.Tests.Documentation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DocTrStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DocTrStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProSuite.QA.Tests.Documentation.DocTrStrings", typeof(DocTrStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a filtered feature class based on several other filters that use the same &apos;featureClassToFilter&apos;..
        /// </summary>
        public static string TrCombinedFilter_0 {
            get {
                return ResourceManager.GetString("TrCombinedFilter_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression that allows combining input filters with AND or OR. An input filter which is passed by a feature evaluates to &apos;true&apos;, a filter that excludes a feature evaluates to &apos;false&apos;. 
        ///The input filters are referenced by the transformer configuration name. If not specified, all input filters are combined with AND, i.e. the feature must pass all filters to be in the result.
        ///Example to get all islands in Bavaria: 
        ///(islands_in_lakes OR islands_in_rivers) AND islands_in_bavaria
        ///islands_in_lakes uses the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TrCombinedFilter_expression {
            get {
                return ResourceManager.GetString("TrCombinedFilter_expression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feature class to be filtered..
        /// </summary>
        public static string TrCombinedFilter_featureClassToFilter {
            get {
                return ResourceManager.GetString("TrCombinedFilter_featureClassToFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filters which should be checked to determine if a feature passes the filter. By default, a feature passes the filter if it passes all input filters..
        /// </summary>
        public static string TrCombinedFilter_inputFilters {
            get {
                return ResourceManager.GetString("TrCombinedFilter_inputFilters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms line feature class &apos;featureClass&apos; by dissolving connected features.
        /// </summary>
        public static string TrDissolve_0 {
            get {
                return ResourceManager.GetString("TrDissolve_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes to be transfered to transformed feature class. Must be used with alias and group expression, i.e. &apos;MAX(LAUF_NR) AS MAX_LAUF_NR&apos;.
        ///In the resulting feature class, only attributes defined in &apos;Attributes&apos; or &apos;GroupBy&apos; can be used..
        /// </summary>
        public static string TrDissolve_Attributes {
            get {
                return ResourceManager.GetString("TrDissolve_Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only feature that fulfill constraint between each other are dissolved.
        /// </summary>
        public static string TrDissolve_Constraint {
            get {
                return ResourceManager.GetString("TrDissolve_Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Default = false)
        ///- false: create separate features when 3 or more features are connected. Only connections with 2 features are dissolved.
        ///- true: create multipart features for all connected source features..
        /// </summary>
        public static string TrDissolve_CreateMultipartFeatures {
            get {
                return ResourceManager.GetString("TrDissolve_CreateMultipartFeatures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line feature class to dissolve.
        /// </summary>
        public static string TrDissolve_featureClass {
            get {
                return ResourceManager.GetString("TrDissolve_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group features by &apos;GroupBy&apos; before dissolving
        ///In the resulting feature class, only attributes defined in &apos;Attributes&apos; or &apos;GroupBy&apos; can be used..
        /// </summary>
        public static string TrDissolve_GroupBy {
            get {
                return ResourceManager.GetString("TrDissolve_GroupBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Default = Tile)
        ///-Tile: dissolve features only within the current tile
        ///- All: if features start/end outside tile, load additional connected features (recursively).
        /// </summary>
        public static string TrDissolve_NeighborSearchOption {
            get {
                return ResourceManager.GetString("TrDissolve_NeighborSearchOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additonal distance to cache &apos;featureClass&apos; features per tile.
        /// </summary>
        public static string TrDissolve_SearchDistance {
            get {
                return ResourceManager.GetString("TrDissolve_SearchDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms multipatches to polygons by taking their footprints.
        /// </summary>
        public static string TrFootprint_0 {
            get {
                return ResourceManager.GetString("TrFootprint_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to multipatch feature class to transform.
        /// </summary>
        public static string TrFootprint_multipatchClass {
            get {
                return ResourceManager.GetString("TrFootprint_multipatchClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms geometries to points. The transformed feature class has the attribute PartIndex and VertexIndex. These fields index from which polygon part the transformed polygon part was generated.
        /// </summary>
        public static string TrGeometryToPoints_0 {
            get {
                return ResourceManager.GetString("TrGeometryToPoints_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GeometryComponent to extract.
        /// </summary>
        public static string TrGeometryToPoints_component {
            get {
                return ResourceManager.GetString("TrGeometryToPoints_component", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to multipoint, line, polygon or multpatch class to transform.
        /// </summary>
        public static string TrGeometryToPoints_featureClass {
            get {
                return ResourceManager.GetString("TrGeometryToPoints_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes that are copied from source featureclass to resulting featureclass.
        /// </summary>
        public static string TrGeometryTransform_Attributes {
            get {
                return ResourceManager.GetString("TrGeometryTransform_Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms features of &apos;intersected&apos; by intersecting them with features from &apos;intersecting&apos;.
        ///If intersected is a line class and intersecting is a polygon class, then the resulting feature class has an attribute &apos;PartIntersected&apos; which contains the (resultingFeature.Shape.Length / intersectedFeature.Shape.Length).
        /// </summary>
        public static string TrIntersect_0 {
            get {
                return ResourceManager.GetString("TrIntersect_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature class. The attributes of &apos;intersected&apos; can be accessed by &apos;t0.&lt;field&gt;&apos; in the resulting featureClass.
        /// </summary>
        public static string TrIntersect_intersected {
            get {
                return ResourceManager.GetString("TrIntersect_intersected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature class. The attributes of &apos;intersecting&apos; can be accessed by &apos;t1.&lt;field&gt;&apos; in the resulting featureClass.
        /// </summary>
        public static string TrIntersect_intersecting {
            get {
                return ResourceManager.GetString("TrIntersect_intersecting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms closed lines of &apos;closedLineClass&apos; to polygons.
        /// </summary>
        public static string TrLineToPolygon_0 {
            get {
                return ResourceManager.GetString("TrLineToPolygon_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to line feature class to transform.
        /// </summary>
        public static string TrLineToPolygon_closedLineClass {
            get {
                return ResourceManager.GetString("TrLineToPolygon_closedLineClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defines how to handle not closed lines
        ///- AsPolygonIfClosedElseIgnore (default) : ignore not closed lines.
        /// </summary>
        public static string TrLineToPolygon_PolylineUsage {
            get {
                return ResourceManager.GetString("TrLineToPolygon_PolylineUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a table from an existing table or view in the database. This allows using tables that would otherwise not be usable because they have not been harvested as datasets in the data dictionary. Typical examples are:
        ///- Association tables in many-to-many relationship classes
        ///- Tables or views that are not part of the geodatabase.
        ///If the table is part of the geodatabase and registered as versioned it will be opened from the same version as the base table..
        /// </summary>
        public static string TrMakeTable_0 {
            get {
                return ResourceManager.GetString("TrMakeTable_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a table from an SQL statement directly evaluated in the RDBMS. The same restrictions apply as for ArcGIS &apos;query layers&apos;. For example, versioned data cannot be accessed, only the raw tables in the database including tables that are not registered as part of the geodatabase..
        /// </summary>
        public static string TrMakeTable_1 {
            get {
                return ResourceManager.GetString("TrMakeTable_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A table from the same data model. This table will be used to determine the workspace of the table..
        /// </summary>
        public static string TrMakeTable_baseTable {
            get {
                return ResourceManager.GetString("TrMakeTable_baseTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field name containing the non-null and unique values to be used as identifier..
        /// </summary>
        public static string TrMakeTable_objectIdField {
            get {
                return ResourceManager.GetString("TrMakeTable_objectIdField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SQL statement to be evaluated in the database. Example: SELECT ID, REGION, LAUF_NR, STATUS FROM TLM.GEWISS_LAUF_REGION WHERE REGION &lt;&gt; &apos;LI&apos; AND LAUF_NR IN (SELECT LAUF_NR FROM TLM.GEWISS_LAUF_EXTERNAL WHERE OWNER = &apos;KANTON&apos;).
        /// </summary>
        public static string TrMakeTable_sql {
            get {
                return ResourceManager.GetString("TrMakeTable_sql", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the database object to be created and made usable as table..
        /// </summary>
        public static string TrMakeTable_viewOrTableName {
            get {
                return ResourceManager.GetString("TrMakeTable_viewOrTableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms multipart lines to single lines. The transformed feature class has the attribute PartIndex. This field index from which line part the transformed line was generated.
        /// </summary>
        public static string TrMultilineToLine_0 {
            get {
                return ResourceManager.GetString("TrMultilineToLine_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to line feature class to transform.
        /// </summary>
        public static string TrMultilineToLine_featureClass {
            get {
                return ResourceManager.GetString("TrMultilineToLine_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms multipart polygons to single polygons. The transformed feature class has the attributes OuterRingIndex and InnerRingIndex. These fields index from which polygon part the transformed polygon was generated.
        ///The transformed feature class has also the attributes of &apos;featureClass&apos;, which can be accessed by &apos;t0.&lt;fieldName&gt;&apos;..
        /// </summary>
        public static string TrMultipolygonToPolygon_0 {
            get {
                return ResourceManager.GetString("TrMultipolygonToPolygon_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polygon feature class to transform.
        /// </summary>
        public static string TrMultipolygonToPolygon_featureClass {
            get {
                return ResourceManager.GetString("TrMultipolygonToPolygon_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default = SinglePolygons
        ///-SinglePolygon: converts multi polygon to single polygons (Remark: InnerRingIndex = -2)
        ///-OuterRings: converts all out rings to polygons (Remark: InnerRingIndex = -1)
        ///-InnerRings: converts all inner rings to polygons
        ///-AllRings: converts all rings to polygons (Remark: polygons generated from outer rings: InnerRingIndex = -1).
        /// </summary>
        public static string TrMultipolygonToPolygon_TransformedParts {
            get {
                return ResourceManager.GetString("TrMultipolygonToPolygon_TransformedParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a filtered feature class containing only the features that are contained within features from &apos;containing&apos;. The resulting feature class has the same properties and attributes as &apos;featureClassToFilter&apos;..
        /// </summary>
        public static string TrOnlyContainedFeatures_0 {
            get {
                return ResourceManager.GetString("TrOnlyContainedFeatures_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The features used to check if they contain the features to be filtered..
        /// </summary>
        public static string TrOnlyContainedFeatures_containing {
            get {
                return ResourceManager.GetString("TrOnlyContainedFeatures_containing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feature class to be filtered..
        /// </summary>
        public static string TrOnlyContainedFeatures_featureClassToFilter {
            get {
                return ResourceManager.GetString("TrOnlyContainedFeatures_featureClassToFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a filtered feature class containing only the features that intersect features from &apos;intersecting&apos;.  The resulting feature class has the same properties and attributes as &apos;featureClassToFilter&apos;..
        /// </summary>
        public static string TrOnlyIntersectingFeatures_0 {
            get {
                return ResourceManager.GetString("TrOnlyIntersectingFeatures_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feature class to be filtered..
        /// </summary>
        public static string TrOnlyIntersectingFeatures_featureClassToFilter {
            get {
                return ResourceManager.GetString("TrOnlyIntersectingFeatures_featureClassToFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The features used to check if they intersect the features to be filtered..
        /// </summary>
        public static string TrOnlyIntersectingFeatures_intersecting {
            get {
                return ResourceManager.GetString("TrOnlyIntersectingFeatures_intersecting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transform polygon to line by taking the boundary of the polygons in &apos;featureClass&apos;.
        ///The transformed feature class has also the attributes of &apos;featureClass&apos;, which can be accessed by &apos;t0.&lt;fieldName&gt;&apos;..
        /// </summary>
        public static string TrPolygonToLine_0 {
            get {
                return ResourceManager.GetString("TrPolygonToLine_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polygon feature class.
        /// </summary>
        public static string TrPolygonToLine_featureClass {
            get {
                return ResourceManager.GetString("TrPolygonToLine_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms features of &apos;t0&apos; and features of &apos;t1&apos; to features, with shape of &apos;t0&apos; if they intersect..
        /// </summary>
        public static string TrSpatialJoin_0 {
            get {
                return ResourceManager.GetString("TrSpatialJoin_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint on spatially joined features. Only spatially joined feature pairs that fulfill the constraint will be transformed to resulting features.
        ///The involved features are aliased using &quot;T0&quot; and T1&quot;.
        ///Example: T0.Level = T1.Level.
        /// </summary>
        public static string TrSpatialJoin_Constraint {
            get {
                return ResourceManager.GetString("TrSpatialJoin_Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default = false.
        ///If false: create one feature for each (t0,t1)-feature pair that intersects
        ///if true: create one feature for each feature in &apos;t0&apos;, that intersects any feature of &apos;t1&apos;.
        /// </summary>
        public static string TrSpatialJoin_Grouped {
            get {
                return ResourceManager.GetString("TrSpatialJoin_Grouped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Default = Tile)
        ///-Tile: join features only within the current tile
        ///- All: if features lie partially outside tile, load additional connected features .
        /// </summary>
        public static string TrSpatialJoin_NeighborSearchOption {
            get {
                return ResourceManager.GetString("TrSpatialJoin_NeighborSearchOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default = false.Left outer Join.
        ///If true: transform features from t0-features that have no spatial relation to any feature of t1
        ///If false: ignore features from t0 that have no spatial relation to any feature of t1.
        /// </summary>
        public static string TrSpatialJoin_OuterJoin {
            get {
                return ResourceManager.GetString("TrSpatialJoin_OuterJoin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature class that provides the shape for the new features.
        /// </summary>
        public static string TrSpatialJoin_t0 {
            get {
                return ResourceManager.GetString("TrSpatialJoin_t0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes of &apos;t0&apos; that are transfered to transformed feature class. Can be used with alias, i.e. &apos;TOPGIS_TLM.TLM_GEWAESSER_LAUF.LAUF_NR AS T1_LAUF_NR&apos;.
        ///In the resulting feature class, only attributes defined in T0Attributes or T1Attributes can be used. .
        /// </summary>
        public static string TrSpatialJoin_T0Attributes {
            get {
                return ResourceManager.GetString("TrSpatialJoin_T0Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature class to join.
        /// </summary>
        public static string TrSpatialJoin_t1 {
            get {
                return ResourceManager.GetString("TrSpatialJoin_t1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See T0Attributes.
        ///If &apos;Grouped&apos;=true, the attributes must be defined by Group-Expressions like COUNT(),MIN(),MAX()... 
        ///Remark: Group expressions can only containt a single field expression. If a more complex expression is needed, use the parameter T1CalcAttributes.
        ///Example: Count the number of joined features with a specific objecttype &apos;x&apos; would be: 
        ///T1CalcAttributes: &quot;IIF(objecttype=&apos;x&apos;,1,0) AS X_VALUE&quot;
        ///T1Attributes: &quot;SUM(X_VALUE) AS X_COUNT&quot;.
        /// </summary>
        public static string TrSpatialJoin_T1Attributes {
            get {
                return ResourceManager.GetString("TrSpatialJoin_T1Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculations with attributes of &apos;t1&apos; that are used in Group-Expressions.
        ///See T1Attributes.
        /// </summary>
        public static string TrSpatialJoin_T1CalcAttributes {
            get {
                return ResourceManager.GetString("TrSpatialJoin_T1CalcAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transforms table &apos;t0&apos; and table &apos;t1&apos;, which must be related by &apos;relationName&apos;, to a joined table.
        /// </summary>
        public static string TrTableJoin_0 {
            get {
                return ResourceManager.GetString("TrTableJoin_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JoinType.
        /// </summary>
        public static string TrTableJoin_joinType {
            get {
                return ResourceManager.GetString("TrTableJoin_joinType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name of existing relation between &apos;t0&apos; and &apos;t1&apos;.
        /// </summary>
        public static string TrTableJoin_relationName {
            get {
                return ResourceManager.GetString("TrTableJoin_relationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to table to join with &apos;t1&apos;.
        /// </summary>
        public static string TrTableJoin_t0 {
            get {
                return ResourceManager.GetString("TrTableJoin_t0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to table to join with &apos;leftTable&apos;.
        /// </summary>
        public static string TrTableJoin_t1 {
            get {
                return ResourceManager.GetString("TrTableJoin_t1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a joined table with the fields from &apos;leftTable&apos; and &apos;rightTable&apos;..
        /// </summary>
        public static string TrTableJoinInMemory_0 {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of join. Currently inner joins and left joins are supported..
        /// </summary>
        public static string TrTableJoinInMemory_joinType {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_joinType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The left table in the join. Its OBJECTID field will be used in the result table. If it is a FeatureClass its shape field it will be used in the result FeatureClass..
        /// </summary>
        public static string TrTableJoinInMemory_leftTable {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_leftTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key field in the left table..
        /// </summary>
        public static string TrTableJoinInMemory_leftTableKey {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_leftTableKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The association / bridge table for a many-to-many join..
        /// </summary>
        public static string TrTableJoinInMemory_manyToManyTable {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_manyToManyTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key field in the many-to-many association table referencing the leftTableKey..
        /// </summary>
        public static string TrTableJoinInMemory_manyToManyTableLeftKey {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_manyToManyTableLeftKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key field in the many-to-many association table referencing the rightTableKey..
        /// </summary>
        public static string TrTableJoinInMemory_manyToManyTableRightKey {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_manyToManyTableRightKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The right table in the join..
        /// </summary>
        public static string TrTableJoinInMemory_rightTable {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_rightTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key field in the right table..
        /// </summary>
        public static string TrTableJoinInMemory_rightTableKey {
            get {
                return ResourceManager.GetString("TrTableJoinInMemory_rightTableKey", resourceCulture);
            }
        }
    }
}
