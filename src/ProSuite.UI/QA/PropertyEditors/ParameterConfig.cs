using System;
using System.ComponentModel;
using ProSuite.Commons.Essentials.CodeAnnotations;
using ProSuite.Commons.UI.PropertyEditors;
using ProSuite.DomainModel.AO.QA;
using ProSuite.DomainModel.Core.QA;

namespace ProSuite.UI.QA.PropertyEditors
{
	public abstract class ParameterConfig : IQualityConditionContextAware,
	                                        IAttributeInfoProvider
	{
		public event EventHandler DataChanged;

		private TestParameterValue _value;
		private QualityCondition _qc;
		private string _attributeName;

		[CanBeNull] private IQualityConditionContextAware _context;

		// TODO
		// public abstract ParameterConfig Clone();

		public TestParameterValue GetTestParameterValue()
		{
			return _value;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parameterValue"></param>
		/// <remarks>Called from code generated by <see cref="DefaultTestConfiguratorFactory"/></remarks>
		public virtual void SetTestParameterValue(
			[NotNull] TestParameterValue parameterValue)
		{
			_value = parameterValue;
		}

		[Browsable(false)]
		public QualityCondition QualityCondition
		{
			get { return _qc; }
			set
			{
				_qc = value;
				if (value != null && _value != null && _value?.DataType == null)
				{
					foreach (var paramValue in _qc.ParameterValues)
					{
						if (paramValue.TestParameterName == _value.TestParameterName)
						{
							_value.DataType = paramValue.DataType;
							break;
						}
					}
				}
			}
		}

		[Browsable(false)]
		public ITestParameterDatasetProvider DatasetProvider { get; set; }

		protected string GetAttributeName()
		{
			return _attributeName;
		}

		public void SetAttributeName(string attributeName)
		{
			_attributeName = attributeName;
		}

		// public void CreateTestParameterValue(string name) {}

		public override string ToString()
		{
			return _value != null
				       ? _value.StringValue ?? string.Empty
				       : "{null}";
		}

		public object GetContext()
		{
			return _context;
		}

		public void SetContext(object context)
		{
			DatasetProvider = null;
			_context = context as IQualityConditionContextAware;

			if (context != null && _context == null)
			{
				throw new InvalidOperationException(
					string.Format("Expected {0}, got {1}",
					              typeof(IQualityConditionContextAware),
					              context.GetType()));
			}

			if (_context != null)
			{
				DatasetProvider = _context.DatasetProvider;
				QualityCondition = _context.QualityCondition;
			}
		}

		public void OnDataChanged(EventArgs args)
		{
			if (DataChanged != null)
			{
				DataChanged(this, args);
			}
		}
	}
}
