//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProSuite.QA.TestFactories {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DocStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DocStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProSuite.QA.TestFactories.DocStrings", typeof(DocStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline feature classes.
        /// </summary>
        internal static string QaAngleFactory_featureClasses {
            get {
                return ResourceManager.GetString("QaAngleFactory_featureClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to include z-coordinate for checking.
        /// </summary>
        internal static string QaAngleFactory_is3D {
            get {
                return ResourceManager.GetString("QaAngleFactory_is3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to minimum angle in °.
        /// </summary>
        internal static string QaAngleFactory_limit {
            get {
                return ResourceManager.GetString("QaAngleFactory_limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds rows in &apos;table&apos; based on a list of expressions defined in another table. The expression table can be filtered to a subset of expressions relevant for the verified table..
        /// </summary>
        internal static string QaConstraintsListFactory {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The table that contains the list of constraints.
        /// </summary>
        internal static string QaConstraintsListFactory_constraintsTable {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory_constraintsTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An optional field name that contains a description of the expression. If an error is reported, the error description includes this description text..
        /// </summary>
        internal static string QaConstraintsListFactory_descriptionField {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory_descriptionField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the field that contains the expression to check.
        /// </summary>
        internal static string QaConstraintsListFactory_expressionField {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory_expressionField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &apos;true&apos;, the expressions indicate error situations. In this case the row must not fulfill the expression to be correct. If &apos;false&apos;, the expressions are treated as constraints that must be fulfilled by a row to be correct..
        /// </summary>
        internal static string QaConstraintsListFactory_expressionIsError {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory_expressionIsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The table to verify.
        /// </summary>
        internal static string QaConstraintsListFactory_table {
            get {
                return ResourceManager.GetString("QaConstraintsListFactory_table", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all start/end points in &apos;polylineClasses&apos; that connect to no other start/end point
        ///Remark: The feature classes in &apos;polylineClasses&apos; must have the same spatial reference.
        /// </summary>
        internal static string QaDangleFactory {
            get {
                return ResourceManager.GetString("QaDangleFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline feature classes.
        /// </summary>
        internal static string QaDangleFactory_polylineClasses {
            get {
                return ResourceManager.GetString("QaDangleFactory_polylineClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all rows in &apos;table&apos; that do not fulfill the constraints.
        /// </summary>
        internal static string QaDatasetConstraintFactory {
            get {
                return ResourceManager.GetString("QaDatasetConstraintFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constraints to check. If a constraint starts with &apos;+&apos;, the constraint is a subconstraint.
        /// </summary>
        internal static string QaDatasetConstraintFactory_constraint {
            get {
                return ResourceManager.GetString("QaDatasetConstraintFactory_constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to table to check.
        /// </summary>
        internal static string QaDatasetConstraintFactory_table {
            get {
                return ResourceManager.GetString("QaDatasetConstraintFactory_table", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds pseudo nodes: Finds all endpoints in &apos;polylineClasses&apos;, that correspond to exactly 2 From-/To-points of &apos;polylineClasses&apos;, where:
        ///- the two involved features belong to the same feature class, 
        ///- the attributes values of the involved features do not differ,
        ///- they are not separated by a point out of &apos;validPseudoNodes&apos;
        ///Remark: All feature classes in &apos;polylineClasses&apos; and &apos;validPseudoNodes&apos; must have the same spatial reference.
        /// </summary>
        internal static string QaFactoryPseudoNodes {
            get {
                return ResourceManager.GetString("QaFactoryPseudoNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to fields that are not checked for equality (not editable fields are ignored by default).
        ///For each feature class in &apos;polylineClasses&apos;, the ignore fields must be defined.
        ///The sort order must correspond with &apos;polylineClasses&apos;. The ignoreFields of the layers are separated and must be ended by an ignoreFields value &apos;-&apos;..
        /// </summary>
        internal static string QaFactoryPseudoNodes_ignoreFields {
            get {
                return ResourceManager.GetString("QaFactoryPseudoNodes_ignoreFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates if end points of closed lines which are not connected to another line should be ignored..
        /// </summary>
        internal static string QaFactoryPseudoNodes_IgnoreLoopEndpoints {
            get {
                return ResourceManager.GetString("QaFactoryPseudoNodes_IgnoreLoopEndpoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline feature classes.
        /// </summary>
        internal static string QaFactoryPseudoNodes_polylineClasses {
            get {
                return ResourceManager.GetString("QaFactoryPseudoNodes_polylineClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to feature classes containing point, line or polygon features to indicate valid pseudo nodes. Pseudo nodes are valid, if they lie on a point, a polyline or a polygon border of &apos;validPseudoNodes&apos;..
        /// </summary>
        internal static string QaFactoryPseudoNodes_validPseudoNodes {
            get {
                return ResourceManager.GetString("QaFactoryPseudoNodes_validPseudoNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all rows in &apos;table&apos; that do not fulfill the attribute rules that are defined in the geodatabase.
        /// </summary>
        internal static string QaGdbConstraintFactory {
            get {
                return ResourceManager.GetString("QaGdbConstraintFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates if NULL values for fields with a coded value domain are allowed.
        /// </summary>
        internal static string QaGdbConstraintFactory_AllowNullValuesForCodedValueDomains {
            get {
                return ResourceManager.GetString("QaGdbConstraintFactory_AllowNullValuesForCodedValueDomains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates if NULL values for fields with a range domain are allowed.
        /// </summary>
        internal static string QaGdbConstraintFactory_AllowNullValuesForRangeDomains {
            get {
                return ResourceManager.GetString("QaGdbConstraintFactory_AllowNullValuesForRangeDomains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to table with subtypes and domains.
        /// </summary>
        internal static string QaGdbConstraintFactory_table {
            get {
                return ResourceManager.GetString("QaGdbConstraintFactory_table", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to reference scale.
        /// </summary>
        internal static string QaLinearUnitFactory_referenceScale {
            get {
                return ResourceManager.GetString("QaLinearUnitFactory_referenceScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to linear units.
        /// </summary>
        internal static string QaLinearUnitFactory_units {
            get {
                return ResourceManager.GetString("QaLinearUnitFactory_units", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all connected features in &apos;featureClasses&apos; that do not correspond with the &apos;rules&apos;.
        ///&apos;featureClasses&apos; can consist of line and point featureclasses. &apos;rules&apos; are checked at all distinct points that exist as start/endpoint (line featureclasses) or points (point featureclasses).
        ///Remark: the feature classes in &apos;featureClasses&apos; must have the same spatial reference. 
        ///The rules are processed in ordered direction. 
        ///If the involved features correspond to no rule, they are reported.
        ///
        ///One rule consists out o [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QaLineConnection {
            get {
                return ResourceManager.GetString("QaLineConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline or point feature classes.
        /// </summary>
        internal static string QaLineConnection_featureClasses {
            get {
                return ResourceManager.GetString("QaLineConnection_featureClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to list of rules. Must be a multiple of the number of &apos;featureClasses&apos;.
        /// </summary>
        internal static string QaLineConnection_rules {
            get {
                return ResourceManager.GetString("QaLineConnection_rules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all intersections between lines of &apos;featureClasses&apos; where the intersection angle is smaller than &apos;limit&apos;
        ///Remark: The feature classes in &apos;featureClasses&apos; must have the same spatial reference.
        /// </summary>
        internal static string QaLineIntersectAngleFactory {
            get {
                return ResourceManager.GetString("QaLineIntersectAngleFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline or polygon feature classes.
        /// </summary>
        internal static string QaLineIntersectAngleFactory_featureClasses {
            get {
                return ResourceManager.GetString("QaLineIntersectAngleFactory_featureClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all segments in &apos;featureClass&apos; where the slope is larger than &apos;limit&apos;.
        /// </summary>
        internal static string QaMaxSlopeFactory {
            get {
                return ResourceManager.GetString("QaMaxSlopeFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline or polygon feature class.
        /// </summary>
        internal static string QaMaxSlopeFactory_featureClass {
            get {
                return ResourceManager.GetString("QaMaxSlopeFactory_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to maximum angle in °.
        /// </summary>
        internal static string QaMaxSlopeFactory_limit {
            get {
                return ResourceManager.GetString("QaMaxSlopeFactory_limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all pair of lines in &apos;featureClasses&apos; with common start or end point where the angle built by the lines is smaller than &apos;limit&apos;
        ///Remark: The feature classes in &apos;featureClasses&apos; must have the same spatial reference.
        /// </summary>
        internal static string QaMinNodeAngleFactory {
            get {
                return ResourceManager.GetString("QaMinNodeAngleFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all consecutive segments in &apos;featureClass&apos; where the angle between two segments is smaller than &apos;limit&apos;.
        /// </summary>
        internal static string QaMinSegAngleFactory {
            get {
                return ResourceManager.GetString("QaMinSegAngleFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polyline or polygon feature class.
        /// </summary>
        internal static string QaMinSegAngleFactory_featureClass {
            get {
                return ResourceManager.GetString("QaMinSegAngleFactory_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to include z-coordinate for checking.
        /// </summary>
        internal static string QaMinSegAngleFactory_is3D {
            get {
                return ResourceManager.GetString("QaMinSegAngleFactory_is3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to minimum allowed angle between segments (in °).
        /// </summary>
        internal static string QaMinSegAngleFactory_limit {
            get {
                return ResourceManager.GetString("QaMinSegAngleFactory_limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all rows in the joined table that do not fulfill &apos;constraint&apos;.
        /// </summary>
        internal static string QaRelConstraint {
            get {
                return ResourceManager.GetString("QaRelConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates if the filter expressions of the joined datasets are applied in the database. If False, the filter expressions are applied on the client, 
        ///using the SQL dialect used by the QA framework, which provides cross-database compatibility. For large datasets, applying the filter expressions 
        ///in the database may provide significant performance gains. However, this requires the filter expression to conform to the SQL syntax of the database.
        ///Note that constraints are always applied on the client, expectin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QaRelConstraint_ApplyFilterExpressionsInDatabase {
            get {
                return ResourceManager.GetString("QaRelConstraint_ApplyFilterExpressionsInDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constraints to check. If a constraint starts with &apos;+&apos;, the constraint is a subconstraint.
        /// </summary>
        internal static string QaRelConstraint_constraint {
            get {
                return ResourceManager.GetString("QaRelConstraint_constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to join type. The first table of the &apos;relationTables&apos; is left table, the second table is right table.
        /// </summary>
        internal static string QaRelConstraint_join {
            get {
                return ResourceManager.GetString("QaRelConstraint_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name of the relation.
        /// </summary>
        internal static string QaRelConstraint_relation {
            get {
                return ResourceManager.GetString("QaRelConstraint_relation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tables of relation.
        /// </summary>
        internal static string QaRelConstraint_relationTables {
            get {
                return ResourceManager.GetString("QaRelConstraint_relationTables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find errors in checking if polylines of a joined table with same attributes are connected.
        /// </summary>
        internal static string QaRelGroupConnected {
            get {
                return ResourceManager.GetString("QaRelGroupConnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to indication of allowed shape types (combinations are possible):
        ///
        ///Cycles (1): Circular connected lines are allowed
        ///Branches (2): Branching lines are allowed, that means common start/end points of 3 or more lines
        ///InsideBranches (4): A branch toward the inside of a circular area may exist.
        /// </summary>
        internal static string QaRelGroupConnected_allowedShape {
            get {
                return ResourceManager.GetString("QaRelGroupConnected_allowedShape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to a list of all field names that define a key. Features with the same key are tested to be connected.
        /// </summary>
        internal static string QaRelGroupConnected_groupBy {
            get {
                return ResourceManager.GetString("QaRelGroupConnected_groupBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to join type. The first table of the &apos;relationTables&apos; is left table, the second table is right table.
        /// </summary>
        internal static string QaRelGroupConnected_join {
            get {
                return ResourceManager.GetString("QaRelGroupConnected_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name of the relation.
        /// </summary>
        internal static string QaRelGroupConnected_relation {
            get {
                return ResourceManager.GetString("QaRelGroupConnected_relation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tables of relation.
        /// </summary>
        internal static string QaRelGroupConnected_relationTables {
            get {
                return ResourceManager.GetString("QaRelGroupConnected_relationTables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks if the number of distinct values of an expression (which may be a single field or a more complex expression involving field concatenation, value translation, substring extraction etc.) within groups defined by a &apos;group by&apos; expression (which also may be a single field or a more complex expression on fields) does not exceed an allowed maximum value. The expressions are evaluated in a joined view of two tables..
        /// </summary>
        internal static string QaRelGroupConstraints {
            get {
                return ResourceManager.GetString("QaRelGroupConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find errors in checking if connected polylines of a joined table with same attributes related to &apos;groupBy&apos; meet the conditions defined by the parameters.
        /// </summary>
        internal static string QaRelLineGroupConstraints {
            get {
                return ResourceManager.GetString("QaRelLineGroupConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only groups that fulfill &apos;GroupCondition&apos; are tested..
        /// </summary>
        internal static string QaRelLineGroupConstraints_GroupCondition {
            get {
                return ResourceManager.GetString("QaRelLineGroupConstraints_GroupCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finds all features in a joined table that are not closer than &apos;maximumDistance&apos; to any feature of &apos;nearClasses&apos;, or for which nearby features in &apos;nearClasses&apos; do exist, but a given comparison constraint is not fulfilled.
        ///Note that errors can be reported only for features that are completely within the verified extent. Features that extend beyond the verified extent may have valid neighbors outside of the searched extent, and are therefore ignored..
        /// </summary>
        internal static string QaRelMustBeNearOther {
            get {
                return ResourceManager.GetString("QaRelMustBeNearOther", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to join type. The first table of the &apos;relationTables&apos; is left table, the second table is right table.
        /// </summary>
        internal static string QaRelMustBeNearOther_join {
            get {
                return ResourceManager.GetString("QaRelMustBeNearOther_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name of the relation.
        /// </summary>
        internal static string QaRelMustBeNearOther_relation {
            get {
                return ResourceManager.GetString("QaRelMustBeNearOther_relation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tables of relation.
        /// </summary>
        internal static string QaRelMustBeNearOther_relationTables {
            get {
                return ResourceManager.GetString("QaRelMustBeNearOther_relationTables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find all none unique rows in a joined table.
        /// </summary>
        internal static string QaRelUnique {
            get {
                return ResourceManager.GetString("QaRelUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to join type. The first table of the &apos;relationTables&apos; is left table, the second table is right table.
        /// </summary>
        internal static string QaRelUnique_join {
            get {
                return ResourceManager.GetString("QaRelUnique_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to maximum number of rows in memory. If less or equal 0, default value is used.
        /// </summary>
        internal static string QaRelUnique_maxRows {
            get {
                return ResourceManager.GetString("QaRelUnique_maxRows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name of the relation.
        /// </summary>
        internal static string QaRelUnique_relation {
            get {
                return ResourceManager.GetString("QaRelUnique_relation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tables of relation.
        /// </summary>
        internal static string QaRelUnique_relationTables {
            get {
                return ResourceManager.GetString("QaRelUnique_relationTables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to attributes for unique constraint (separated by &quot;,&quot;, an index on the first unique attribute must exist).
        /// </summary>
        internal static string QaRelUnique_unique {
            get {
                return ResourceManager.GetString("QaRelUnique_unique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find features of &apos;featureClass&apos; that intersect &apos;reference&apos; when buffered according to &apos;featuresubtypeRules&apos;.
        ///
        ///Remark: For line ends that are not coincident to any other line end (=dangles), a flat end buffer is used.
        ///
        ///Remark: The configuration can be exported/imported to/from a csv-File for easier configuration.
        ///if &lt;referenceSubtypes&gt; and &lt;featuresubtypeRules&gt; are empty, a matrix with all available subtypes is created when exporting the quality condition..
        /// </summary>
        internal static string QaTopoNotNearPolyFactory {
            get {
                return ResourceManager.GetString("QaTopoNotNearPolyFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to line featureClass.
        /// </summary>
        internal static string QaTopoNotNearPolyFactory_featureClass {
            get {
                return ResourceManager.GetString("QaTopoNotNearPolyFactory_featureClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to rules defining buffer and valid overlaps. 
        ///Each rule is formatted as follows:
        ///
        ///&lt;subtypecode&gt;;&lt;default near distance&gt;;&lt;right side distance&gt;;[&lt;allowedOverlaps&gt;]
        ///
        ///with
        ///&lt;subtypeCode&gt; must be a subtype code of &apos;featureClass&apos;
        ///&lt;default near distance&gt;: minimum distance that a feature with subtype &lt;subtypecode&gt; must be away from relevant features of &apos;reference&apos;. For the right side of the feature, this value may be overridden by &lt;right side distance&gt;. 
        ///&lt;right side distance&gt;: minimum distance that the right si [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QaTopoNotNearPolyFactory_featuresubtypeRules {
            get {
                return ResourceManager.GetString("QaTopoNotNearPolyFactory_featuresubtypeRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to polygon featureClass.
        /// </summary>
        internal static string QaTopoNotNearPolyFactory_reference {
            get {
                return ResourceManager.GetString("QaTopoNotNearPolyFactory_reference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to test relevant subtype codes of &apos;reference&apos;. features with subtypes that are not in &apos;referenceSubtypes&apos; are not tested..
        /// </summary>
        internal static string QaTopoNotNearPolyFactory_referenceSubtypes {
            get {
                return ResourceManager.GetString("QaTopoNotNearPolyFactory_referenceSubtypes", resourceCulture);
            }
        }
    }
}
